AWSTemplateFormatVersion: '2010-09-09'
Description: Core network template consisting of VPC, IGW, RoutrTables and Subnets
Parameters:
  VpcCidr:
    Type: String
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    Description: Enter Your Vpc Cidr Block
  NbPublicSubnet:
    Type: Number
    Default: 1
    Description: Enter The number of Public Subnet
    MinValue: 1
    MaxValue: 3
  NbPrivateSubnet:
    Type: Number
    Default: 1
    Description: Enter The number of Private Subnet
    MinValue: 1
    MaxValue: 3
  PublicSubnet1Cidr:
    Type: String
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    Description: Enter your public subnet Cidr Block
  PrivateSubnet1Cidr:
    Type: String
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    Description: Enter Your private subnet Cidr Block
Conditions:
  Has2PublicSubnets: !Equals
    - !Ref NbPublicSubnet
    - 2
  Has3PublicSubnets: !Equals
    - !Ref NbPublicSubnet
    - 3
  Has2PrivatecSubnets: !Equals
    - !Ref NbPrivateSubnet
    - 2
  Has3PrivatecSubnets: !Equals
    - !Ref NbPrivateSubnet
    - 3
Resources:
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
  VpcInternetGatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyInternetGateway
      VpcId: !Ref MyVpc
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1Cidr
      VpcId: !Ref MyVpc
  PublicSubnet2:
    LogicalID:
      Type: AWS::EC2::Subnet
      Condition: Has2PublicSubnets
      Properties:
        AssignIpv6AddressOnCreation: false
        AvailabilityZone: String
        AvailabilityZoneId: String
        CidrBlock: String
        EnableDns64: false
        Ipv6CidrBlock: String
        Ipv6Native: false
        MapPublicIpOnLaunch: false
        OutpostArn: String
        PrivateDnsNameOptionsOnLaunch:
          EnableResourceNameDnsAAAARecord: false
          EnableResourceNameDnsARecord: false
          HostnameType: String
        Tags: Tags
        VpcId: !Ref MyVpc
  PublicSubnet3:
    LogicalID:
      Type: AWS::EC2::Subnet
      Conditions: Has3PublicSubnets
      Properties:
        AvailabilityZone: null
        Fn::Select:
          - 0
          - !GetAZs ''
        CidrBlock: !Ref PublicSubnet1Cidr
        VpcId: MyVpc
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet1Cidr
      VpcId: !Ref MyVpc
  PublicSubnetRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PrivateSubnetRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1